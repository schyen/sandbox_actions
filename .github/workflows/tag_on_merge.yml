name: Bump version in PR & ensure tag points to merge commit

on:
  workflow_run:
    workflows: ["validate_PR_label"]
    types: [completed]

permissions:
  contents: write

jobs:
  bump_and_tag:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          # The triggering workflow passes a `pull_request` in its event payload
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0


      - name: Use PAT for pushes if provided
        run: |
          if [ -n "${PUSH_TOKEN}" ]; then
            echo "Using PUSH_TOKEN for pushes"
            git remote set-url origin https://x-access-token:${PUSH_TOKEN}@github.com/${REPO}.git
          else
            echo "Using default runner auth (GITHUB_TOKEN)"
          fi

      - name: Fetch tags from origin
        run: git fetch --tags --force

      - name: Get latest tag
        id: get_latest
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest" >> "$GITHUB_OUTPUT"
          echo "Latest tag: $latest"

      - name: Determine initial bump level and candidate tag
        id: determine
        env:
          PR_LABELS: ${{ toJson(github.event.pull_request.labels) }}
          INPUT_LEVEL: ${{ github.event.inputs.version_level }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          latest="${{ steps.get_latest.outputs.latest_tag }}"
          echo "Latest tag: $latest"
          # Default bump level
          level=""
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            level="$INPUT_VERSION_LEVEL"
          else
            echo "Detecting bump level from PR labels: $PR_LABELS"
            if echo "$PR_LABELS" | grep -iq '"name":"major"'; then
              level="major"
            elif echo "$PR_LABELS" | grep -iq '"name":"minor"'; then
              level="minor"
            else
              level="patch"
            fi
          fi

          IFS='.' read -r major minor patch <<<"${latest#v}"
          case "$level" in
            major)
               major=$((major + 1)); minor=0; patch=0 ;;
            minor)
              minor=$((minor + 1)); patch=0 ;;
            patch|*)
              patch=$((patch + 1)) ;;
          esac

          candidate="v${major}.${minor}.${patch}"
          echo "bump_level=$level" >> "$GITHUB_OUTPUT"
          echo "candidate_tag=$candidate" >> "$GITHUB_OUTPUT"
          echo "Determined candidate: $candidate"

      - name: Reserve unique tag by looping & update setup.py to match
        id: reserve_and_push
        shell: bash
        run: |
          set -euo pipefail

          increment_patch() {
            v="$1"
            v="${v#v}"
            IFS='.' read -r maj min pat <<<"$v"
            pat=$((pat + 1))
            echo "v${maj}.${min}.${pat}"
          }

          branch="${PR_BRANCH}"
          candidate="${{ steps.determine.outputs.candidate_tag }}"

          while true; do
            echo "Checking remote for tag: $candidate"
            git fetch --tags --force

            # check remote for tag existence
            if git ls-remote --tags origin "$candidate" | grep -q "refs/tags/$candidate"; then
              echo "Tag $candidate already exists on remote — incrementing patch and trying again"
              candidate=$(increment_patch "$candidate")
              continue
            fi

            clean="${candidate#v}"
            echo "Updating setup.py to version $clean"

            # Replace only the numeric version portion, preserving quotes (matches your setup.py)
            sed -i -E "s/(version\s*=\s*['\"])[0-9]+\.[0-9]+\.[0-9]+(['\"])/\1$clean\2/" setup.py

            if git diff --quiet; then
              echo "No changes to commit (setup.py already at $clean)"
            else
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add setup.py
              git commit -m "chore: bump version to ${candidate}" || true
              echo "Pushing commit to PR branch ${branch}"
              git push origin "HEAD:${branch}"
            fi

            # create (or recreate) local tag and push
            if git rev-parse --verify --quiet "$candidate" >/dev/null; then
              git tag -d "$candidate" || true
            fi
            git tag -a "$candidate" -m "Release $candidate"

            echo "Pushing tag $candidate to origin"
            if git push origin "$candidate"; then
              echo "Successfully pushed tag $candidate"
              echo "final_tag=$candidate" >> "$GITHUB_OUTPUT"
              echo "final_version=${candidate#v}" >> "$GITHUB_OUTPUT"
              break
            else
              echo "Tag push failed (likely race). Deleting local tag and incrementing patch to retry."
              git tag -d "$candidate" || true
              candidate=$(increment_patch "$candidate")
            fi
          done

      - name: Output result
        run: |
          echo "Version set in PR: ${{ steps.reserve_and_push.outputs.final_version }}"
          echo "Tag created (provisional at PR commit): ${{ steps.reserve_and_push.outputs.final_tag }}"

  repoint_tag_on_push:
    # only run for push events to main
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from setup.py
        id: version
        run: |
          ver=$(sed -n -E "s/.*version\s*=\s*['\"]([0-9]+\.[0-9]+\.[0-9]+)['\"].*/\1/p" setup.py)
          if [ -z "$ver" ]; then
            echo "Could not extract version from setup.py" >&2
            exit 1
          fi
          echo "version=$ver" >> "$GITHUB_OUTPUT"
          echo "tag=v$ver" >> "$GITHUB_OUTPUT"
          echo "Detected version: v$ver"

      - name: Move or create tag to point at merge commit
        env:
          PUSH_TOKEN: ${{ secrets.PUSH_TOKEN || '' }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          GHTOKEN="${PUSH_TOKEN:-${GITHUB_TOKEN}}"
          MAIN_SHA=$(git rev-parse HEAD)
          TAG="${{ steps.version.outputs.tag }}"

          echo "Updating tag $TAG to point to commit $MAIN_SHA"

          # check if tag ref exists
          status=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GHTOKEN" \
            "https://api.github.com/repos/${REPO}/git/refs/tags/${TAG}")

          if [ "$status" = "200" ]; then
            echo "Tag exists; moving it to new commit"
            curl -s -X PATCH \
              -H "Authorization: token $GHTOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"sha\":\"${MAIN_SHA}\",\"force\":true}" \
              "https://api.github.com/repos/${REPO}/git/refs/tags/${TAG}"
          elif [ "$status" = "404" ]; then
            echo "Tag not found; creating it at main commit"
            curl -s -X POST \
              -H "Authorization: token $GHTOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"ref\":\"refs/tags/${TAG}\",\"sha\":\"${MAIN_SHA}\"}" \
              "https://api.github.com/repos/${REPO}/git/refs"
          else
            echo "Unexpected status ${status} from GitHub API when checking tag; aborting"
            exit 1
          fi

          echo "✅ Tag ${TAG} now points to the merge commit ${MAIN_SHA}"
